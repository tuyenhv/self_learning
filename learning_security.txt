- An initialization vector (IV) is an arbitrary number that can be used along with a secret key for data encryption. This number, also called a nonce, is employed only one time in any session.

- pseudorandom bit generator (PRBG)

- an HMAC (sometimes expanded as either keyed-hash message authentication code or hash-based message authentication code) is a specific type of message authentication code (MAC) involving a cryptographic hash function and a secret cryptographic key.

- https://lwn.net/Articles/760121/
random: add a config option to trust the CPU's hwrng

- https://lwn.net/Articles/760584/
Theodore Ts'o posted a patch on July 17 to add a kernel configuration option that would explicitly trust the CPU vendor's hardware RNG (e.g. the RDRAND instruction for x86). Kernels built with RANDOM_TRUST_CPU will immediately initialize the random number pool using the architecture's facility, without waiting for enough entropy to accumulate from other sources; this means that the getrandom() system call will not block. Waiting for systems to gather enough entropy has been a problem in the past, especially for virtual machines and embedded systems where such entropy can be difficult to find.

- https://patchwork.kernel.org/patch/9275207/
Add crypto/lrng_base.c and crypto/lrng_kcapi.c

folder:
drivers/char/hw_random

Files:
crypto/drbg.c
drivers/char/random.c
/drivers/char/hw_random/intel-rng.c

function: get-random-bytes()

List file for IV generator.
./echainiv.c
./rsaprivkey.asn1
./seqiv.c


arch/x86/crypto/aesni-intel_asm.S
arch/x86/crypto/aesni-intel_avx-x86_64.S
drivers/crypto/atmel-aes.c


https://patchwork.kernel.org/patch/10531149/
random: add a config option to trust the CPU's hwrng

https://github.com/torvalds/linux/blob/master/arch/x86/kernel/cpu/rdrand.c
TODO:
- check this file is available from version???
- Add debug log to this file to know the function in this file is called or not

https://tls.mbed.org/ctr-drbg-source-code
- not sure this file from this page is available in linux upstream.

https://csrc.nist.gov/csrc/media/events/random-number-generation-workshop-2004/documents/hashblockcipherdrbg.pdf

https://github.com/balena-io/node-lkl/blob/master/src/linux/crypto/echainiv.c
/*
 * echainiv: Encrypted Chain IV Generator
 *
 * This generator generates an IV based on a sequence number by multiplying
 * it with a salt and then encrypting it with the same key as used to encrypt
 * the plain text.  This algorithm requires that the block size be equal
 * to the IV size.  It is mainly useful for CBC.
 *
 * This generator can only be used by algorithms where authentication
 * is performed after encryption (i.e., authenc).
